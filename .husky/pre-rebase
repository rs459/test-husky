#!/bin/sh
# Ce script s'ex√©cute AVANT une op√©ration de rebase Git.

# Le premier argument ($1) du hook pre-rebase est la branche sur laquelle vous rebasez.
# Exemple: Si vous faites 'git rebase main', alors TARGET_BRANCH sera 'main'.
TARGET_BRANCH="$1"

# Si aucune branche cible n'est sp√©cifi√©e (ex: 'git rebase' sans argument, ou rebase interactive),
# ou si la branche cible n'a pas de branche distante configur√©e, nous sautons cette v√©rification.
if [ -z "$TARGET_BRANCH" ]; then
  echo "‚ÑπÔ∏è  Aucune branche cible sp√©cifique fournie pour le rebase. V√©rification de l'√©tat du distant ignor√©e pour la cible."
  exit 0
fi

REMOTE_TARGET_BRANCH=$(git for-each-ref --format='%(upstream:short)' refs/heads/$TARGET_BRANCH 2>/dev/null)

if [ -z "$REMOTE_TARGET_BRANCH" ]; then
  echo "‚ÑπÔ∏è  Aucune branche distante de suivi trouv√©e pour la branche cible '$TARGET_BRANCH'. V√©rification de l'√©tat du distant ignor√©e."
  exit 0
fi

echo "üîç V√©rification de l'√©tat de la branche cible '$TARGET_BRANCH' par rapport √† son distant '$REMOTE_TARGET_BRANCH' avant le rebase..."

# R√©cup√®re les derni√®res informations du distant sans afficher de sortie.
# Cela permet de s'assurer que notre connaissance de l'√©tat distant est √† jour.
REMOTE_NAME=$(echo "$REMOTE_TARGET_BRANCH" | cut -d'/' -f1)
git fetch "$REMOTE_NAME" --quiet

# Compare le hash de la branche cible locale avec celui de sa branche distante.
LOCAL_TARGET_HASH=$(git rev-parse "$TARGET_BRANCH")
REMOTE_TARGET_HASH=$(git rev-parse "$REMOTE_TARGET_BRANCH")
BASE_HASH=$(git merge-base "$TARGET_BRANCH" "$REMOTE_TARGET_HASH") # Attention, ici c'est REMOTE_TARGET_HASH pour la comparaison de base

if [ "$LOCAL_TARGET_HASH" = "$REMOTE_TARGET_HASH" ]; then
  echo "‚úÖ La branche cible '$TARGET_BRANCH' est √† jour avec '$REMOTE_TARGET_BRANCH'. Rebase autoris√©."
  exit 0
elif [ "$LOCAL_TARGET_HASH" = "$BASE_HASH" ]; then
  echo "‚ùå Erreur : La branche cible '$TARGET_BRANCH' est EN RETARD par rapport √† son distant '$REMOTE_TARGET_BRANCH'."
  echo "   Veuillez mettre √† jour '$TARGET_BRANCH' (par exemple, en ex√©cutant 'git checkout $TARGET_BRANCH && git pull') avant de rebaser dessus."
  echo "   Rebase annul√©."
  exit 1 # Indique une erreur pour annuler l'op√©ration Git
else
  # Cas o√π la branche locale est en avance ou a diverg√©.
  # L'objectif principal est d'emp√™cher les rebases sur des branches "pas √† jour" (en retard).
  # Pour les autres cas (en avance ou diverg√©), nous permettons le rebase mais affichons un avertissement.
  echo "‚ö†Ô∏è  La branche cible '$TARGET_BRANCH' n'est pas parfaitement synchronis√©e avec '$REMOTE_TARGET_BRANCH' (elle est en avance ou a diverg√©)."
  echo "   Rebase autoris√©, mais consid√©rez la mettre √† jour pour un historique plus propre."
  exit 0
fi