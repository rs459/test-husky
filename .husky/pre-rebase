#!/bin/sh
#
# Ce hook pre-rebase v√©rifie que la branche cible du rebase est √† jour
# avec son √©quivalent distant. Si ce n'est pas le cas, il demande
# √† l'utilisateur s'il veut continuer ou annuler pour mettre √† jour.
#

set -e # Sortir imm√©diatement si une commande √©choue

TARGET_BRANCH="$1" # La branche cible du rebase (e.g., 'main')

echo "--- Ex√©cution du hook pre-rebase ---"

# V√©rifier si une branche cible est fournie (pour ignorer les 'rebase --continue', etc.)
if [ -z "$TARGET_BRANCH" ]; then
  echo "‚ÑπÔ∏è  Aucune branche cible sp√©cifique fournie pour le rebase (e.g., 'git rebase --continue' ou 'git rebase --abort')."
  echo "    Le hook n'effectue pas de v√©rification de synchronisation distante dans ce cas."
  exit 0 # Autoriser l'op√©ration car ce n'est pas un rebase initial sur une branche cible.
fi

# D√©terminer la branche distante correspondante
REMOTE_TARGET_BRANCH=$(git for-each-ref --format='%(upstream:short)' refs/heads/"$TARGET_BRANCH" 2>/dev/null)

if [ -z "$REMOTE_TARGET_BRANCH" ]; then
  echo "‚ÑπÔ∏è  Aucune branche distante de suivi trouv√©e pour la branche cible '$TARGET_BRANCH'."
  echo "    Impossible de v√©rifier la synchronisation. Rebase autoris√©."
  exit 0
fi

# R√©cup√©rer les derni√®res informations du d√©p√¥t distant
echo "üîç R√©cup√©ration des derni√®res informations du d√©p√¥t distant pour '$REMOTE_TARGET_BRANCH'..."
REMOTE_NAME=$(echo "$REMOTE_TARGET_BRANCH" | cut -d'/' -f1)
git fetch "$REMOTE_NAME" --quiet || {
    echo "‚ùå Erreur lors de la r√©cup√©ration des informations du d√©p√¥t distant '$REMOTE_NAME'."
    echo "    Veuillez v√©rifier votre connexion ou les permissions. Rebase annul√©."
    exit 1
}
echo "‚úÖ R√©f√©rences distantes mises √† jour."

# Comparer les hashes
LOCAL_TARGET_HASH=$(git rev-parse "refs/heads/$TARGET_BRANCH")
REMOTE_TARGET_HASH=$(git rev-parse "refs/remotes/$REMOTE_TARGET_BRANCH")
BASE_HASH=$(git merge-base "refs/heads/$TARGET_BRANCH" "refs/remotes/$REMOTE_TARGET_BRANCH")


if [ "$LOCAL_TARGET_HASH" = "$REMOTE_TARGET_HASH" ]; then
  # La branche locale est parfaitement √† jour.
  echo "‚úÖ La branche cible '$TARGET_BRANCH' est √† jour avec '$REMOTE_TARGET_BRANCH'."
  echo "    Rebase autoris√©."
  exit 0 # Succ√®s
else
  # La branche n'est PAS √† jour. Informer l'utilisateur et demander son choix.
  echo "--- ATTENTION : Votre branche '$TARGET_BRANCH' n'est PAS √† jour avec '$REMOTE_TARGET_BRANCH' ---"

  if [ "$LOCAL_TARGET_HASH" = "$BASE_HASH" ]; then
    echo "    (Elle est en retard : '$REMOTE_TARGET_BRANCH' a des commits que votre '$TARGET_BRANCH' n'a pas.)"
  elif [ "$REMOTE_TARGET_HASH" = "$BASE_HASH" ]; then
    echo "    (Elle est en avance : Votre '$TARGET_BRANCH' a des commits non pouss√©s sur '$REMOTE_TARGET_BRANCH'.)"
  else
    echo "    (Elle a diverg√© : Il y a des commits locaux et distants que l'autre n'a pas.)"
  fi

  echo "----------------------------------------------------------------------------------"
  echo "Il est FORTEMENT RECOMMAND√â de mettre √† jour votre branche '$TARGET_BRANCH'"
  echo "avant de rebaser dessus (par exemple, en ex√©cutant 'git checkout $TARGET_BRANCH && git pull')."
  echo "----------------------------------------------------------------------------------"

  # Demander √† l'utilisateur s'il veut continuer
  read -p "Voulez-vous annuler le rebase pour mettre √† jour la branche ? (y/N) " -n 1 -r REPLY
  echo # (pour un retour √† la ligne apr√®s la saisie)

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Rebase annul√© par l'utilisateur. Veuillez mettre √† jour '$TARGET_BRANCH' et r√©essayer."
    exit 1 # L'utilisateur a choisi d'annuler.
  else
    echo "Rebase continu√© √† la demande de l'utilisateur. Soyez conscient des cons√©quences."
    exit 0 # L'utilisateur a choisi de continuer.
  fi
fi